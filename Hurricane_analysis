# -*- coding: utf-8 -*-
"""
Created on Thu Mar 31 17:52:37 2022

@author: Anu
"""




# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# Conversion of damages into float values function here:

def myfunc(damages): 
  conversion = {"M": 1000000,
              "B": 1000000000}
  updated_damages = []
  for number in damages:
    if number[-1] == "M":
      updated_damages.append(float(number[:-1])* (conversion.get("M")))
    elif number[-1] == "B":
      updated_damages.append(float(number[:-1])* (conversion.get("B")))
    else:
      updated_damages.append(number)

  return updated_damages

updam_out = myfunc(damages)

## Create and view the hurricanes dictionary

# Constructing hurricane dictionary function :

def name_dictionary(names,months,years,max_sustained_winds,areas_affected,updated_damages,deaths):
    hurricanes = []
   
    for i in range(len(names)):
        new_dict = {"Name": names[i], "Month": months[i], "Year": years[i], "Max sustained winds":max_sustained_winds[i], "Areas affected": areas_affected[i], "Damage": updated_damages[i], "Deaths": deaths[i]}
        hurricanes.append({key: value for key in names for key,value in new_dict.items() }) 
        hurricanes_dict = dict(zip(names,hurricanes))
    return hurricanes_dict
hurricanes = name_dictionary(names,months,years,max_sustained_winds,areas_affected,updam_out,deaths)
print(hurricanes)


# Constructing hurricane by year dictionary function :

def year_dictionary(names,months,years,max_sustained_winds,areas_affected,updated_damages,deaths):
    hurri = []
    for i in range(len(years)):
        y_dict = {"Name": names[i], "Month": months[i], "Year": years[i], "Max sustained winds":max_sustained_winds[i], "Areas affected": areas_affected[i], "Damage": updated_damages[i], "Deaths": deaths[i]}
        hurri.append({key: value for key in years for key,value in y_dict.items() }) 
        h_dict_yearwise = dict(zip(years,hurri))
    return h_dict_yearwise
output2= year_dictionary(names,months,years,max_sustained_winds,areas_affected,updam_out,deaths)
print(output2)





# Finding how many times each area was affected function:
def cal_affected(hurricanes):
    affected_areas_num = {}
    for i in hurricanes:
        for area in hurricanes[i]['Areas affected']:
            if area not in affected_areas_num:
                affected_areas_num[area] = 1
            else:
                affected_areas_num[area] += 1
    return affected_areas_num

counter = cal_affected(hurricanes)
print(counter)



# Finding most affected area function: 

def most_affected(counter):
    for key,value in counter.items(): 
        max_keys = [key for key,value in counter.items() if value == max(counter.values())] 
    return (str(max_keys)+ ": " + str(max(counter.values())))
    
most_affected_areas = (most_affected(counter))
print(most_affected_areas)
  
    
 
    
# Finding the greatest number of deaths function:

def most_deaths(hurricanes):
    maximum = 'Cuba I'
    count = 0
    for i in hurricanes:
        b = hurricanes[i]['Deaths']
        if b > count:
            maximum = i
            count = b
    return maximum, count

deadliest = most_deaths(hurricanes)
print(deadliest)

            
    
    

# Catgeorization of hurricanes by mortality function :

def mortality(hurricanes):
    
    mortality_rating = {0:[],1:[],2:[],3:[],4:[],5:[]}
    
   
    for i in hurricanes:
        num = (hurricanes[i]['Deaths'])
        
        if num == 0 :
           mortality_rating[0].append(i)
            
        if num > 0 and num <= 100:
            mortality_rating[1].append(i)
        
        if num > 100 and num <= 500:
            mortality_rating[2].append(i)
        
        if num > 500 and num <= 1000:
            mortality_rating[3].append(i)
        
        if num > 1000 and num <= 10000:
            mortality_rating[4].append(i)
        
        if num > 10000 :
            mortality_rating[5].append(i)     
            
    return mortality_rating
    

mortality_rating = mortality(hurricanes)
print(mortality_rating)




# Finding hurricane with greatest damage function:

def costliest(hurricanes):
    maximum = 'Cuba I'
    count = 0
    for i in hurricanes:
       
        b = hurricanes[i]['Damage']
        if isinstance(b, float):
            if b > count:
                maximum = i
                count = b
        
    return maximum, count

costliest_hurricane = costliest(hurricanes)
print(costliest_hurricane)






# Catgeorizationof hurricanes by damage function :

    
def damages_rated(hurricanes):
    
    damage_scale = {0:[],1:[],2:[],3:[],4:[],5:[]}
    
   
    for i in hurricanes:
        num = (hurricanes[i]['Damage'])
        if isinstance(num, float): 
            if num == 0 :
                damage_scale[0].append(i)
            
            if num > 0 and num <= 100000000:
                damage_scale[1].append(i)
        
            if num > 100000000 and num <= 1000000000:
                damage_scale[2].append(i)
        
            if num > 1000000000 and num <= 10000000000:
                damage_scale[3].append(i)
        
            if num > 10000000000 and num <= 50000000000:
                damage_scale[4].append(i)
        
            if num > 50000000000 :
                damage_scale[5].append(i)
     
               
        
        
            
    return damage_scale
    

damage_scale = damages_rated(hurricanes)
print(damage_scale)
